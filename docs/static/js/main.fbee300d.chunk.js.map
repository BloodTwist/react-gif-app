{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","categories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","json","data","gifts","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","console","log","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yKAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCJDQ,EAAc,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAgC,KAAjBC,WAELC,mBAAS,KAFa,mBAEnDC,EAFmD,KAEvCC,EAFuC,KAgB1D,OACI,0BAAMC,SATW,SAAEC,GACnBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BT,GAAe,SAAEC,GAAF,OAAoBE,GAApB,mBAAmCF,OAClDG,EAAc,OAMd,2BACIM,KAAK,OACLC,MAAQR,EACRS,SAjBc,SAAEN,GACxB,OAAOF,EAAeE,EAAEO,OAAOF,Y,uBCR1BG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGWI,MAAOF,GAHlB,8BAGyBG,OAHzB,uBAGXC,EAHW,EAGXA,KAEFC,EAAQD,EAAKE,KAAK,SAAEC,GAAS,IAAD,EAC9B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATvB,kBAaXK,GAbW,2CAAH,sDCEPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBR,EAAkB,EAAlBA,IAAKS,EAAa,EAAbA,MAEpC,OACI,yBAAKI,UAAU,kDACX,yBAAKC,IAAMd,EAAMe,IAAMN,EAAQI,UAAU,cACzC,2BAAKJ,KCFJO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAc,IAAD,EACbb,mBAAS,CAC/BmB,KAAK,GACLa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAgBvC,OAXAC,qBAAW,WACPvB,EAASC,GACJtB,MAAM,SAACkC,GAAD,OAAYS,EAAS,CAAEf,KAAMM,EAAQO,SAAS,SAC1D,CAACnB,IAMJuB,QAAQC,IAAIJ,GAELA,EDZ0BK,CAAczB,GAAlCY,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,oCACI,4BAAMnB,GACJmB,GAAW,yCACb,yBAAKJ,UAAU,cAEPH,EAAOJ,KAAK,SAACC,GAAD,OACR,kBAAC,EAAD,eACIiB,IAAMjB,EAAIC,IACLD,UEelBkB,EA7BM,WAAO,IAAD,EAEexC,mBAAU,CAAE,6DAF3B,mBAEfD,EAFe,KAEHD,EAFG,KAUvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEQC,EAAWsB,KAAK,SAAER,GAAF,OACZ,kBAAC,EAAD,CACI0B,IAAM1B,EACNA,SAAWA,U,YChBvC4B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SAM1BxD,K","file":"static/js/main.fbee300d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories, categories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) =>{\r\n        return setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) =>{\r\n        e.preventDefault();\r\n        if ( inputValue.trim().length > 2) {\r\n            setCategories( ( categories ) => [ inputValue, ...categories ]);\r\n            setInputValue('');\r\n        }\r\n    }    \r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=HyDooWpDn4V6sMLUrKdllOXWQNgvAJfQ`;\r\n    const { data } = await (await fetch( url )).json();\r\n\r\n    const gifts = data.map( ( img ) =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return  gifts;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, url, title } ) => {\r\n\r\n    return (\r\n        <div className=\"card__item animate__animated animate__backInUp\">\r\n            <img src={ url } alt={ title } className=\"card__img\" />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n            { loading && <p>Loading...</p>}\r\n            <div className=\"card__grid\">\r\n                {\r\n                    images.map( (img) => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img } \r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n    useEffect( () =>{\r\n        getGifs( category )\r\n            .then( (images) => setState({ data: images, loading: false}));\r\n    }, [category])\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         .then( setImages );\r\n    //         // .then( images => setImages( images ));\r\n    // }, [ category ]);\r\n    console.log(state)\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [ categories, setCategories ] = useState( [ 'Seishun Buta Yarou wa Bunny Girl Senpai no Yume wo Minai'] );\r\n\r\n\r\n    // My way\r\n    // const handleAdd = () =>{\r\n    //     return setCategories( cat => cat.concat( 're:zero') );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n            <ol>\r\n                { \r\n                    categories.map( ( category ) => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                } \r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}